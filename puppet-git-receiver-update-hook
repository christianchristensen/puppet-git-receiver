#!/bin/bash

function msg { echo -e "\E[${COLOUR}m$@\E[0m" >&2 ; }
function notice { COLOUR="0;36" msg "notice: $@" ; }
function error { COLOUR="0;31" msg "err: $@" ; }

function cleanup {
		if [[ "$DEST" != "" ]] && [ -d "$DEST" ] ; then
				rm -rf $DEST
		fi
}

function cleanup_and_error {
		cleanup
		error $2
		exit $1
}

set -o pipefail

# Act as an external node classifier if necessary
if env | grep "PUPPET_ENC_FILE" >/dev/null ; then
		if [ -e "$PUPPET_ENC_FILE" ] ; then
				cat $PUPPET_ENC_FILE
		else
				echo -e "classes:\n"
		fi
		exit 0
fi

DEST=

# git branch to consider for puppet
BRANCH=master

# extra options passed to puppet agent
PUPPET_OPTIONS=

full_puppet_options="$PUPPET_OPTIONS $(git config puppet-receiver.args)"

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ] ; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ] ; then
	echo "Usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

if [ "$refname" != "refs/heads/$BRANCH" ] ; then
		exit 0
fi

if ! which puppet >/dev/null ; then
		cleanup_and_error 1 "Cannot find puppet"
fi

if ! which facter >/dev/null ; then
		cleanup_and_error 1 "Cannot find facter utility"
fi

puppetver=$(facter puppetversion)

if [[ $puppetver == 2.6.* || $puppetver == 0.2* ]] ; then
		validate_command="xargs --no-run-if-empty -n1 puppet --parseonly"
else
		validate_command="xargs --no-run-if-empty puppet parser validate"
fi

DEST=$(mktemp -d --suffix=.puppet-git-receiver)
module_path="${DEST}/modules"

if ! git archive --format=tar $newrev | (cd $DEST && tar xf -) ; then
		cleanup_and_error 1 "Encountered a problem extracting the incoming git tree $newrev"
fi

skip_validation=$(git config --bool puppet-receiver.skip-validation)

if [ "$skip_validation" == "true" ] ; then
		notice "Skipping puppet validation due to config option puppet-receiver.skip-validation"
else
		notice "Validating puppet manifests for $refname"		
		if ! find $DEST -name "*.pp" | $validate_command |& sed -u "s,$DEST/,,g" ; then
				cleanup_and_error 1 "Encountered a problem validating the puppet manifests"
		fi
fi

pf_file="${DEST}/.puppetforge-modules"
pf_path="${DEST}/puppetforge-modules"

if [ -e $pf_file ] ; then
		# FIXME: Check puppet version
		notice "Installing puppet forge modules"
		mkdir -p $pf_path || cleanup_and_error 1 "Couldn't create puppet forge modules directory: $pf_path"
		while read -r module_name module_version ; do
				if [[ "$module_name" != "" && ! "$module_name" =~ ^# ]] ; then
						if [[ "$module_version" != "" ]] ; then
								pf_version_arg="--version $module_version"
						fi
						puppet module install --force --target-dir $pf_path $pf_version_arg $module_name |& sed -u "s,$pf_path,,g"
						if [ $? -ne 0 ] ; then
								cleanup_and_error 1 "Error installing puppet forge module $module_name $module_version"
						fi
				fi
		done < $pf_file
		module_path="$module_path:$pf_path"
fi

lp_file="${DEST}/Puppetfile"

if [ -e $lp_file ] ; then
		# FIXME: Inherit verbosity flag from git args
		notice "Installing librarian-puppet modules"
		(cd $DEST; librarian-puppet install --verbose)
fi

manifest_file="${DEST}/manifests/site.pp"

fqdn=`facter fqdn`
enc_file="${DEST}/manifests/nodes/${fqdn}.yml"

if [ ! -e $enc_file ] ; then
		enc_file="${DEST}/manifests/site.yml"
fi

if [ ! -e $enc_file ] ; then
		enc_file=""
fi

if [ ! -e $manifest_file -a ! -e "$enc_file" ] ; then
		notice "No puppet manifest detected"
		cleanup
		exit 0
fi

# Make a blank manifest if necessary
if [ ! -e $manifest_file ] ; then
		touch $manifest_file
fi

if [ -e "$enc_file" ] ; then
		notice "Using external node classification file ${enc_file//$DEST\/}"
fi

confdir="${DEST}/puppet-confdir"
mkdir -p $confdir/ssl

cat <<EOF > "${confdir}/puppet.conf"
[main]
  node_terminus = exec
  external_nodes = `pwd`/$0
  templatedir=${DEST}/templates
EOF

notice "Applying puppet manifests"
sudo -H PUPPET_ENC_FILE=$enc_file puppet apply --confdir=${confdir} $full_puppet_options --detailed-exitcodes --modulepath=${module_path} $manifest_file |& sed -u "s,$DEST/,,g"

PUPRET=$?
if ! [ $PUPRET -eq 0 -o $PUPRET -eq 2 ] ; then
		cleanup_and_error 1 "Encountered a problem applying the puppet manifest, rejecting update"
fi
notice "Puppet manifests applied successfully"
cleanup
